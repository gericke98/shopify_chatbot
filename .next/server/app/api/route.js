"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/route";
exports.ids = ["app/api/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Froute&page=%2Fapi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Froute.ts&appDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Froute&page=%2Fapi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Froute.ts&appDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_santiagogerickeparga_Desktop_AI_my_shopify_chatbot_app_api_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/route.ts */ \"(rsc)/./app/api/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/route\",\n        pathname: \"/api\",\n        filename: \"route\",\n        bundlePath: \"app/api/route\"\n    },\n    resolvedPagePath: \"/Users/santiagogerickeparga/Desktop/AI/my-shopify-chatbot/app/api/route.ts\",\n    nextConfigOutput,\n    userland: _Users_santiagogerickeparga_Desktop_AI_my_shopify_chatbot_app_api_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnNhbnRpYWdvZ2VyaWNrZXBhcmdhJTJGRGVza3RvcCUyRkFJJTJGbXktc2hvcGlmeS1jaGF0Ym90JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnNhbnRpYWdvZ2VyaWNrZXBhcmdhJTJGRGVza3RvcCUyRkFJJTJGbXktc2hvcGlmeS1jaGF0Ym90JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUMwQjtBQUN2RztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXNob3BpZnktY2hhdGJvdC8/ZDRmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvc2FudGlhZ29nZXJpY2tlcGFyZ2EvRGVza3RvcC9BSS9teS1zaG9waWZ5LWNoYXRib3QvYXBwL2FwaS9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvc2FudGlhZ29nZXJpY2tlcGFyZ2EvRGVza3RvcC9BSS9teS1zaG9waWZ5LWNoYXRib3QvYXBwL2FwaS9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Froute&page=%2Fapi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Froute.ts&appDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/mail.ts":
/*!*************************!*\
  !*** ./app/api/mail.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sendEmail: () => (/* binding */ sendEmail)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n\nfunction generateEmailTemplate(orderNumber, email) {\n    return {\n        From: \"hello@shamelesscollective.com\",\n        To: \"hello@shamelesscollective.com\",\n        Subject: \"Comprobante de entrega de pedido\",\n        TextBody: \"Your return was successfully created!\",\n        HtmlBody: `\n        <div style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; background-color: #f9f9f9; padding: 20px; border: 1px solid #ddd; border-radius: 8px; max-width: 600px; margin: 20px auto;\">\n          <!-- Spanish Section -->\n          <div>\n            <p style=\"font-size: 16px; color: #555;\">Hola <strong>Hola!</strong>,</p>\n            <p style=\"font-size: 16px; color: #555;\">\n              Puedes enviar el comprobante de entrega del pedido ${orderNumber} al siguiente correo: ${email}?\n            </p>\n            <p style=\"font-size: 16px; color: #555;\">\n              Saludos cordiales,<br/>\n              <strong>El equipo de Shameless Collective</strong>\n            </p>\n          </div>\n        </div>\n      `\n    };\n}\nasync function sendEmail(recipientEmail, orderNumber, userEmail) {\n    const POSTMARK_API_URL = \"https://api.postmarkapp.com/email\";\n    const postmarkToken = process.env.POSTMARK_SERVER_TOKEN;\n    if (!postmarkToken) {\n        return {\n            status: 500,\n            error: \"Missing required data\"\n        };\n    }\n    try {\n        const emailTemplate = generateEmailTemplate(orderNumber, userEmail);\n        const emailData = {\n            ...emailTemplate,\n            To: recipientEmail,\n            MessageStream: \"outbound\"\n        };\n        const result = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(POSTMARK_API_URL, emailData, {\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"X-Postmark-Server-Token\": postmarkToken\n            }\n        });\n        return {\n            status: result.status\n        };\n    } catch (error) {\n        if (axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(error)) {\n            console.error(\"Email error:\", error.response?.data || error.message);\n        } else if (error instanceof Error) {\n            console.error(\"Email error:\", error.message);\n        }\n        return {\n            status: 500,\n            error: \"Failed to send email\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL21haWwudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMEI7QUFFMUIsU0FBU0Msc0JBQXNCQyxXQUFtQixFQUFFQyxLQUFhO0lBQy9ELE9BQU87UUFDTEMsTUFBTTtRQUNOQyxJQUFJO1FBQ0pDLFNBQVM7UUFDVEMsVUFBVTtRQUNWQyxVQUFVLENBQUM7Ozs7OztpRUFNa0QsRUFBRU4sWUFBWSxzQkFBc0IsRUFBRUMsTUFBTTs7Ozs7Ozs7TUFRdkcsQ0FBQztJQUNMO0FBQ0Y7QUFFTyxlQUFlTSxVQUNwQkMsY0FBc0IsRUFDdEJSLFdBQW1CLEVBQ25CUyxTQUFpQjtJQUVqQixNQUFNQyxtQkFBbUI7SUFDekIsTUFBTUMsZ0JBQWdCQyxRQUFRQyxHQUFHLENBQUNDLHFCQUFxQjtJQUN2RCxJQUFJLENBQUNILGVBQWU7UUFDbEIsT0FBTztZQUFFSSxRQUFRO1lBQUtDLE9BQU87UUFBd0I7SUFDdkQ7SUFFQSxJQUFJO1FBQ0YsTUFBTUMsZ0JBQWdCbEIsc0JBQXNCQyxhQUFhUztRQUN6RCxNQUFNUyxZQUFZO1lBQ2hCLEdBQUdELGFBQWE7WUFDaEJkLElBQUlLO1lBQ0pXLGVBQWU7UUFDakI7UUFFQSxNQUFNQyxTQUFTLE1BQU10Qiw2Q0FBS0EsQ0FBQ3VCLElBQUksQ0FBQ1gsa0JBQWtCUSxXQUFXO1lBQzNESSxTQUFTO2dCQUNQQyxRQUFRO2dCQUNSLGdCQUFnQjtnQkFDaEIsMkJBQTJCWjtZQUM3QjtRQUNGO1FBQ0EsT0FBTztZQUFFSSxRQUFRSyxPQUFPTCxNQUFNO1FBQUM7SUFDakMsRUFBRSxPQUFPQyxPQUFnQjtRQUN2QixJQUFJbEIsNkNBQUtBLENBQUMwQixZQUFZLENBQUNSLFFBQVE7WUFDN0JTLFFBQVFULEtBQUssQ0FBQyxnQkFBZ0JBLE1BQU1VLFFBQVEsRUFBRUMsUUFBUVgsTUFBTVksT0FBTztRQUNyRSxPQUFPLElBQUlaLGlCQUFpQmEsT0FBTztZQUNqQ0osUUFBUVQsS0FBSyxDQUFDLGdCQUFnQkEsTUFBTVksT0FBTztRQUM3QztRQUNBLE9BQU87WUFBRWIsUUFBUTtZQUFLQyxPQUFPO1FBQXVCO0lBQ3REO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1zaG9waWZ5LWNoYXRib3QvLi9hcHAvYXBpL21haWwudHM/MzRkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRW1haWxUZW1wbGF0ZShvcmRlck51bWJlcjogc3RyaW5nLCBlbWFpbDogc3RyaW5nKSB7XG4gIHJldHVybiB7XG4gICAgRnJvbTogXCJoZWxsb0BzaGFtZWxlc3Njb2xsZWN0aXZlLmNvbVwiLFxuICAgIFRvOiBcImhlbGxvQHNoYW1lbGVzc2NvbGxlY3RpdmUuY29tXCIsXG4gICAgU3ViamVjdDogXCJDb21wcm9iYW50ZSBkZSBlbnRyZWdhIGRlIHBlZGlkb1wiLFxuICAgIFRleHRCb2R5OiBcIllvdXIgcmV0dXJuIHdhcyBzdWNjZXNzZnVsbHkgY3JlYXRlZCFcIixcbiAgICBIdG1sQm9keTogYFxuICAgICAgICA8ZGl2IHN0eWxlPVwiZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOyBsaW5lLWhlaWdodDogMS42OyBjb2xvcjogIzMzMzsgYmFja2dyb3VuZC1jb2xvcjogI2Y5ZjlmOTsgcGFkZGluZzogMjBweDsgYm9yZGVyOiAxcHggc29saWQgI2RkZDsgYm9yZGVyLXJhZGl1czogOHB4OyBtYXgtd2lkdGg6IDYwMHB4OyBtYXJnaW46IDIwcHggYXV0bztcIj5cbiAgICAgICAgICA8IS0tIFNwYW5pc2ggU2VjdGlvbiAtLT5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHAgc3R5bGU9XCJmb250LXNpemU6IDE2cHg7IGNvbG9yOiAjNTU1O1wiPkhvbGEgPHN0cm9uZz5Ib2xhITwvc3Ryb25nPiw8L3A+XG4gICAgICAgICAgICA8cCBzdHlsZT1cImZvbnQtc2l6ZTogMTZweDsgY29sb3I6ICM1NTU7XCI+XG4gICAgICAgICAgICAgIFB1ZWRlcyBlbnZpYXIgZWwgY29tcHJvYmFudGUgZGUgZW50cmVnYSBkZWwgcGVkaWRvICR7b3JkZXJOdW1iZXJ9IGFsIHNpZ3VpZW50ZSBjb3JyZW86ICR7ZW1haWx9P1xuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPHAgc3R5bGU9XCJmb250LXNpemU6IDE2cHg7IGNvbG9yOiAjNTU1O1wiPlxuICAgICAgICAgICAgICBTYWx1ZG9zIGNvcmRpYWxlcyw8YnIvPlxuICAgICAgICAgICAgICA8c3Ryb25nPkVsIGVxdWlwbyBkZSBTaGFtZWxlc3MgQ29sbGVjdGl2ZTwvc3Ryb25nPlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGAsXG4gIH07XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kRW1haWwoXG4gIHJlY2lwaWVudEVtYWlsOiBzdHJpbmcsXG4gIG9yZGVyTnVtYmVyOiBzdHJpbmcsXG4gIHVzZXJFbWFpbDogc3RyaW5nXG4pOiBQcm9taXNlPHsgc3RhdHVzOiBudW1iZXI7IGVycm9yPzogc3RyaW5nIH0+IHtcbiAgY29uc3QgUE9TVE1BUktfQVBJX1VSTCA9IFwiaHR0cHM6Ly9hcGkucG9zdG1hcmthcHAuY29tL2VtYWlsXCI7XG4gIGNvbnN0IHBvc3RtYXJrVG9rZW4gPSBwcm9jZXNzLmVudi5QT1NUTUFSS19TRVJWRVJfVE9LRU47XG4gIGlmICghcG9zdG1hcmtUb2tlbikge1xuICAgIHJldHVybiB7IHN0YXR1czogNTAwLCBlcnJvcjogXCJNaXNzaW5nIHJlcXVpcmVkIGRhdGFcIiB9O1xuICB9XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBlbWFpbFRlbXBsYXRlID0gZ2VuZXJhdGVFbWFpbFRlbXBsYXRlKG9yZGVyTnVtYmVyLCB1c2VyRW1haWwpO1xuICAgIGNvbnN0IGVtYWlsRGF0YSA9IHtcbiAgICAgIC4uLmVtYWlsVGVtcGxhdGUsXG4gICAgICBUbzogcmVjaXBpZW50RW1haWwsXG4gICAgICBNZXNzYWdlU3RyZWFtOiBcIm91dGJvdW5kXCIsXG4gICAgfTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF4aW9zLnBvc3QoUE9TVE1BUktfQVBJX1VSTCwgZW1haWxEYXRhLCB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtUG9zdG1hcmstU2VydmVyLVRva2VuXCI6IHBvc3RtYXJrVG9rZW4sXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiB7IHN0YXR1czogcmVzdWx0LnN0YXR1cyB9O1xuICB9IGNhdGNoIChlcnJvcjogdW5rbm93bikge1xuICAgIGlmIChheGlvcy5pc0F4aW9zRXJyb3IoZXJyb3IpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRW1haWwgZXJyb3I6XCIsIGVycm9yLnJlc3BvbnNlPy5kYXRhIHx8IGVycm9yLm1lc3NhZ2UpO1xuICAgIH0gZWxzZSBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVtYWlsIGVycm9yOlwiLCBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhdHVzOiA1MDAsIGVycm9yOiBcIkZhaWxlZCB0byBzZW5kIGVtYWlsXCIgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImF4aW9zIiwiZ2VuZXJhdGVFbWFpbFRlbXBsYXRlIiwib3JkZXJOdW1iZXIiLCJlbWFpbCIsIkZyb20iLCJUbyIsIlN1YmplY3QiLCJUZXh0Qm9keSIsIkh0bWxCb2R5Iiwic2VuZEVtYWlsIiwicmVjaXBpZW50RW1haWwiLCJ1c2VyRW1haWwiLCJQT1NUTUFSS19BUElfVVJMIiwicG9zdG1hcmtUb2tlbiIsInByb2Nlc3MiLCJlbnYiLCJQT1NUTUFSS19TRVJWRVJfVE9LRU4iLCJzdGF0dXMiLCJlcnJvciIsImVtYWlsVGVtcGxhdGUiLCJlbWFpbERhdGEiLCJNZXNzYWdlU3RyZWFtIiwicmVzdWx0IiwicG9zdCIsImhlYWRlcnMiLCJBY2NlcHQiLCJpc0F4aW9zRXJyb3IiLCJjb25zb2xlIiwicmVzcG9uc2UiLCJkYXRhIiwibWVzc2FnZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/mail.ts\n");

/***/ }),

/***/ "(rsc)/./app/api/route.ts":
/*!**************************!*\
  !*** ./app/api/route.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _queries_order__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../queries/order */ \"(rsc)/./app/queries/order/index.ts\");\n/* harmony import */ var _mail__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mail */ \"(rsc)/./app/api/mail.ts\");\n\n\n\n\n// AI Service for message classification and response generation\nclass AIService {\n    constructor(){\n        this.SYSTEM_PROMPTS = {\n            CLASSIFICATION: `You are an intelligent assistant that classifies user messages for a Shopify ecommerce chatbot. Your task is to identify the user's intent and extract relevant parameters.\n\nConsider both user messages and system responses in the conversation context when classifying. For example:\n- If a user first tracks an order and receives a response saying it's delivered, then mentions they haven't received it, classify it as a delivery_issue\n- If the system previously provided tracking info and the user reports issues, maintain that tracking number in the parameters\n- If the system confirmed an order number/email pair in a previous response, maintain those in subsequent classifications\n- For change_delivery intent, set delivery_address_confirmed to true ONLY if the user explicitly confirms the new address that was proposed by the system in a previous message. The confirmation should be in response to a system message that proposed a specific address.\n- For returns_exchange intent, check if the returns website URL was already provided in previous system messages\n- If user asks about returns or exchange policy, classify it as returns_exchange intent\n- If user asks about changing the size of a product from their order, classify it as returns_exchange intent\n- If user asks about product sizes or sizing information, classify it as product_sizing intent\n- If the user says \"thank you\", \"thanks\", \"gracias\", \"ok\", \"perfect\", \"perfecto\" or similar closing remarks without asking anything else, classify it as \"conversation_end\"\n\nOutput ONLY a JSON object with the following structure:\n{\n  \"intent\": one of [\"order_tracking\", \"returns_exchange\", \"change_delivery\", \"return_status\", \"promo_code\", \"other\", \"delivery_issue\", \"conversation_end\", \"product_sizing\"],\n  \"parameters\": {\n    \"order_number\": \"extracted order number or empty string\",\n    \"email\": \"extracted email or empty string\", \n    \"product_handle\": \"extracted product handle or empty string\",\n    \"new_delivery_info\": \"new delivery information or empty string\",\n    \"delivery_status\": \"delivered but not received or empty string\",\n    \"tracking_number\": \"tracking number from context or empty string\",\n    \"delivery_address_confirmed\": \"true if user explicitly confirms system's proposed address, false otherwise\",\n    \"return_type\": \"return or exchange or empty string\",\n    \"returns_website_sent\": \"true if returns website URL was already sent, false otherwise\",\n    \"product_name\": \"name of product being asked about or empty string\",\n    \"size_query\": \"specific size question or empty string\"\n  },\n  \"language\": \"English\" or \"Spanish\" (detect the language of the message)\n}`,\n            FINAL_ANSWER: `You are a friendly 30-year-old customer service rep named Santi. Your role is to assist customers with their inquiries about orders, products, returns, and other ecommerce related questions.\n\nImportant communication guidelines:\n- Keep responses extremely brief but professional, using emojis when needed\n- Use spanish from Spain(for Spanish responses)\n- For first-time messages in Spanish, include: \"¡Hola! Soy Santi de Shameless Collective...\" and use Spanish from Spain (using \"vosotros\" form and Spain-specific expressions like \"mola\", \"guay\", \"vale\", etc.)\n- For first-time messages in English, include: \"Hey! This is Santi from Shameless Collective...\"\n- For follow-up messages (context array has items), do not include any introduction\n- When asking for order number and email, provide example format in a casual way\n- For order tracking responses:\n  * Check shopifyData.fulfillments array\n  * If empty array, order is still being prepared\n  * If array has items, tracking info is available in the fulfillments\n- For delivery issues, provide helpful suggestions in a friendly, empathetic way\n- For address changes, check order status in shopifyData\n- For returns/exchanges, explain the process casually and provide the returns portal link: https://shameless-returns-web.vercel.app\n- For promo code inquiries, explain newsletter benefits in a fun way\n- For product sizing inquiries:\n  * Emphasize that garments are oversized/oversize fit\n  * Recommend ordering usual size or one size down\n  * Check product description for specific sizing details\n  * Provide measurements if available in product data\n- If the intent is \"conversation_end\", respond with a friendly closing message like \"Thank you for trusting Shameless Collective!\" in English or \"¡Gracias por confiar en Shameless Collective!\" in Spanish`,\n            ADDRESS_CONFIRMATION: `You are a friendly 23-year-old customer service rep named Santi helping with address collection.\n\nImportant guidelines:\n- Keep responses super casual and friendly\n- Use emojis and informal language\n- Consider previous conversation context\n- For Spanish responses, use Spain-specific expressions and vosotros form\n- For address confirmations, present the address casually and ask for confirmation\n- For multiple addresses, number them and ask user to pick one\n- When asking for a new address, remind them to include zip code, city and complete street address\n- If no address is provided, ask for it in a friendly way`\n        };\n        const apiKey = process.env.OPENAI_API_KEY;\n        const googleMapsApiKey = process.env.GOOGLE_MAPS_API_KEY;\n        if (!apiKey) throw new Error(\"OPENAI_API_KEY is not set\");\n        if (!googleMapsApiKey) throw new Error(\"GOOGLE_MAPS_API_KEY is not set\");\n        this.apiKey = apiKey;\n        this.googleMapsApiKey = googleMapsApiKey;\n    }\n    async callOpenAI(messages, temperature = 0) {\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${this.apiKey}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-4o-mini\",\n                temperature,\n                messages\n            })\n        });\n        if (!response.ok) {\n            console.error(\"OpenAI API error:\", await response.text());\n            throw new Error(\"OpenAI API error\");\n        }\n        return response.json();\n    }\n    getDefaultClassification() {\n        return {\n            intent: \"other\",\n            parameters: {\n                order_number: \"\",\n                email: \"\",\n                product_handle: \"\",\n                new_delivery_info: \"\",\n                delivery_status: \"\",\n                tracking_number: \"\",\n                delivery_address_confirmed: false,\n                return_type: \"\",\n                returns_website_sent: false,\n                product_name: \"\",\n                size_query: \"\"\n            },\n            language: \"English\"\n        };\n    }\n    async classifyMessage(message, context) {\n        const messages = [\n            {\n                role: \"system\",\n                content: this.SYSTEM_PROMPTS.CLASSIFICATION\n            },\n            ...context || [],\n            {\n                role: \"user\",\n                content: message\n            }\n        ];\n        try {\n            const data = await this.callOpenAI(messages);\n            const classification = JSON.parse(data.choices[0].message.content);\n            return this.enrichClassification(classification, context);\n        } catch (error) {\n            console.error(\"Error in message classification:\", error);\n            return this.getDefaultClassification();\n        }\n    }\n    enrichClassification(classification, context) {\n        if (context?.length) {\n            if (classification.intent === \"other\") {\n                this.inheritPreviousIntent(classification, context);\n            }\n            if (classification.intent === \"delivery_issue\") {\n                this.extractTrackingFromContext(classification, context);\n            }\n            if (classification.intent === \"returns_exchange\") {\n                classification.parameters.returns_website_sent = context.some((msg)=>msg.content.includes(\"https://shameless-returns-web.vercel.app\"));\n            }\n        }\n        return classification;\n    }\n    inheritPreviousIntent(classification, context) {\n        for(let i = context.length - 1; i >= 0; i--){\n            const msg = context[i];\n            if (msg.role === \"assistant\" && msg.content.includes(\"intent\")) {\n                try {\n                    const prevClassification = JSON.parse(msg.content);\n                    if (prevClassification.intent && prevClassification.intent !== \"other\") {\n                        classification.intent = prevClassification.intent;\n                        classification.parameters = {\n                            ...prevClassification.parameters,\n                            ...classification.parameters\n                        };\n                        break;\n                    }\n                } catch (e) {\n                    console.error(\"Error parsing previous classification:\", e);\n                    continue;\n                }\n            }\n        }\n    }\n    extractTrackingFromContext(classification, context) {\n        const trackingRegex = /\\[here\\]\\((https:\\/\\/.*?)\\)/;\n        for (const msg of context){\n            const match = msg.content.match(trackingRegex);\n            if (match?.[1]) {\n                const trackingNumber = match[1].split(\"/\").find((part)=>/^\\d+$/.test(part));\n                if (trackingNumber) {\n                    classification.parameters.tracking_number = trackingNumber;\n                    break;\n                }\n            }\n        }\n    }\n    async generateFinalAnswer(intent, parameters, shopifyData, userMessage, context, language) {\n        // For conversation_end intent, return a nice closing message\n        if (intent === \"conversation_end\") {\n            return language === \"Spanish\" ? \"\\xa1Gracias por confiar en Shameless Collective! \\xa1Que tengas un buen d\\xeda! \\uD83D\\uDE4C✨\" : \"Thank you for trusting Shameless Collective! Have a great day! \\uD83D\\uDE4C✨\";\n        }\n        const isFirstMessage = !context || context.length === 0;\n        const systemPrompt = `${this.SYSTEM_PROMPTS.FINAL_ANSWER}\n\nBased on the classified intent \"${intent}\" and the following data:\n${JSON.stringify(parameters, null, 2)}\n\nAdditional Context:\n${userMessage}\n${context?.length ? `\\n${context.map((msg)=>msg.content).join(\"\\n\")}` : \"\"}\n${shopifyData?.success && shopifyData?.order ? `\\nOrder Details:\\n${JSON.stringify(shopifyData.order, null, 2)}\\n\\nTracking Status: ${Array.isArray(shopifyData.order) ? shopifyData.order[0]?.fulfillments?.length === 0 : shopifyData.order?.fulfillments?.length === 0 ? \"Order is still being prepared\" : \"Tracking available in fulfillments array\"}` : \"\"}\n\n${intent === \"other\" ? \"IMPORTANT: Since this is an 'other' intent, carefully analyze the conversation context to provide a relevant response that addresses any previous interactions and maintains continuity.\" : \"Provide a concise response that directly addresses the customer's needs. If you don't have enough information, briefly ask for the specific details needed.\"}\n\nIMPORTANT GUIDELINES:\n${isFirstMessage ? `- Include this exact introduction: \"${language === \"Spanish\" ? \"\\xa1Hola! Soy Santi de Shameless Collective...\" : \"Hey! This is Santi from Shameless Collective...\"}\"` : \"- Do not include any introduction\"}\n- If user asks about delivery times, inform them normal delivery time is 3-5 business days\n- If user indicates waiting longer than 5 business days, inform them we will open a ticket to investigate\n- Respond ONLY in ${language}`;\n        try {\n            const data = await this.callOpenAI([\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                {\n                    role: \"user\",\n                    content: userMessage\n                }\n            ], 0.8);\n            return data.choices[0].message.content;\n        } catch (error) {\n            console.error(\"Error generating final answer:\", error);\n            return \"Sorry, an error occurred while generating a response.\";\n        }\n    }\n    async confirmDeliveryAddress(parameters, userMessage, context, language) {\n        const { new_delivery_info } = parameters;\n        if (!new_delivery_info) {\n            return language === \"Spanish\" ? \"\\xbfMe puedes dar la nueva direcci\\xf3n de entrega? Recuerda incluir el c\\xf3digo postal, ciudad y direcci\\xf3n completa \\uD83D\\uDCE6\" : \"Can you give me the new delivery address? Remember to include the zip code, city and complete address \\uD83D\\uDCE6\";\n        }\n        const addressValidation = await this.validateAddress(new_delivery_info);\n        if (!addressValidation.formattedAddress) {\n            return language === \"Spanish\" ? \"Lo siento, no pude validar esa direcci\\xf3n. \\xbfPodr\\xedas proporcionarme la direcci\\xf3n completa incluyendo c\\xf3digo postal y ciudad? \\uD83C\\uDFE0\" : \"Sorry, I couldn't validate that address. Could you provide me with the complete address including zip code and city? \\uD83C\\uDFE0\";\n        }\n        const systemPrompt = `${this.SYSTEM_PROMPTS.ADDRESS_CONFIRMATION}\n\nPrevious conversation context:\n${context?.length ? context.map((msg)=>`${msg.role}: ${msg.content}`).join(\"\\n\") : \"No previous context\"}\n\nInclude in the response the following:\n${addressValidation.multipleCandidates ? language === \"Spanish\" ? `He encontrado varias direcciones posibles. Por favor, elige el número de la dirección correcta o proporciona una nueva:\\n\\n${addressValidation.addressCandidates.map((addr, i)=>`${i + 1}. ${addr}`).join(\"\\n\")}` : `I found multiple possible addresses. Please choose the number of the correct address or provide a new one:\\n\\n${addressValidation.addressCandidates.map((addr, i)=>`${i + 1}. ${addr}`).join(\"\\n\")}` : language === \"Spanish\" ? `¿Es esta la dirección correcta?\\n\\n${addressValidation.formattedAddress}\\n\\nPor favor, responde \"sí\" para confirmar o proporciona la dirección correcta si no lo es 😊` : `Is this the right address?\\n\\n${addressValidation.formattedAddress}\\n\\nPlease reply \"yes\" to confirm or provide the correct address if it's not 😊`}\n\nIMPORTANT: Respond ONLY in ${language}`;\n        try {\n            const data = await this.callOpenAI([\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                ...context || [],\n                {\n                    role: \"user\",\n                    content: userMessage\n                }\n            ], 0.8);\n            return data.choices[0].message.content;\n        } catch (error) {\n            console.error(\"Error confirming delivery address:\", error);\n            return \"Sorry, an error occurred while processing your address.\";\n        }\n    }\n    async validateAddress(address) {\n        try {\n            const response = await fetch(`https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${encodeURIComponent(address)}&inputtype=textquery&fields=formatted_address&key=${this.googleMapsApiKey}`);\n            if (!response.ok) {\n                throw new Error(\"Failed to validate address with Google API\");\n            }\n            const data = await response.json();\n            return {\n                formattedAddress: data.candidates?.[0]?.formatted_address || \"\",\n                multipleCandidates: data.candidates?.length > 1 || false,\n                addressCandidates: data.candidates?.map((c)=>c.formatted_address) || []\n            };\n        } catch (error) {\n            console.error(\"Error validating address:\", error);\n            return {\n                formattedAddress: \"\",\n                multipleCandidates: false,\n                addressCandidates: []\n            };\n        }\n    }\n}\n// Main API handler\nconst aiService = new AIService();\nasync function POST(req) {\n    try {\n        const { message, context } = await req.json();\n        if (!message) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                response: \"No message provided.\"\n            }, {\n                status: 400\n            });\n        }\n        const classification = await aiService.classifyMessage(message, context);\n        const { intent, parameters, language } = classification;\n        console.log(\"Message classification:\", {\n            intent,\n            parameters,\n            language\n        });\n        let response;\n        // Process intent\n        switch(intent){\n            case \"order_tracking\":\n                console.log(\"Order tracking intent\");\n                response = await handleOrderTracking(parameters, context, language);\n                break;\n            case \"returns_exchange\":\n                console.log(\"Returns exchange intent\");\n                response = language === \"Spanish\" ? \"\\xa1Claro! Puedes hacer el cambio o devoluci\\xf3n en el siguiente link: https://shameless-returns-web.vercel.app\" : \"Sure thing! You can make the change or return in the following link: https://shameless-returns-web.vercel.app\";\n                break;\n            case \"delivery_issue\":\n                console.log(\"Delivery issue intent\");\n                response = await handleDeliveryIssue(parameters, message, context, language);\n                break;\n            case \"change_delivery\":\n                console.log(\"Change delivery intent\");\n                response = await handleChangeDelivery(parameters, message, context, language);\n                break;\n            case \"product_sizing\":\n                console.log(\"Product sizing intent\");\n                response = await handleProductInquiry(parameters, message, context, language);\n                break;\n            case \"promo_code\":\n                console.log(\"Promo code intent\");\n            default:\n                console.log(\"Other intent\");\n                response = await aiService.generateFinalAnswer(intent, parameters, null, message, context, language);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            response\n        });\n    } catch (error) {\n        console.error(\"API Error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            response: \"An error occurred processing your request.\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function handleOrderTracking(parameters, context, language) {\n    const { order_number, email } = parameters;\n    if (!order_number || !email) {\n        const prompt = language === \"Spanish\" ? \"\\xa1Ey! Necesito el n\\xfamero de pedido (tipo #12345) y tu email para poder ayudarte \\uD83D\\uDE0A\" : \"Hey! I need your order number (like #12345) and email to help you out \\uD83D\\uDE0A\";\n        return await aiService.generateFinalAnswer(\"order_tracking\", parameters, null, prompt, context, language);\n    }\n    const shopifyData = await (0,_queries_order__WEBPACK_IMPORTED_MODULE_1__.trackOrder)(order_number, email);\n    console.log(\"Shopify data:\", shopifyData);\n    if (!shopifyData.success) {\n        if (shopifyData.error === \"InvalidOrderNumber\") {\n            const prompt = language === \"Spanish\" ? \"\\xa1Vaya! No encuentro ning\\xfan pedido con ese n\\xfamero \\uD83D\\uDE05 \\xbfPuedes revisarlo y volver a intentarlo?\" : \"Oops! Can't find any order with that number \\uD83D\\uDE05 Can you check and try again?\";\n            return await aiService.generateFinalAnswer(\"order_tracking\", parameters, null, prompt, context, language);\n        }\n        if (shopifyData.error === \"EmailMismatch\") {\n            const prompt = language === \"Spanish\" ? \"\\xa1Ups! El email no coincide con el del pedido \\uD83E\\uDD14 \\xbfPuedes revisar si es el correcto?\" : \"Oops! The email doesn't match the order \\uD83E\\uDD14 Can you check if it's the right one?\";\n            return await aiService.generateFinalAnswer(\"order_tracking\", parameters, null, prompt, context, language);\n        }\n    }\n    return await aiService.generateFinalAnswer(\"order_tracking\", parameters, shopifyData, \"\", context, language);\n}\nasync function handleDeliveryIssue(parameters, message, context, language) {\n    try {\n        await (0,_mail__WEBPACK_IMPORTED_MODULE_2__.sendEmail)(\"hello@shamelesscollective.com\", parameters.order_number, parameters.email);\n    } catch (error) {\n        console.error(\"Error sending email:\", error);\n    }\n    return await aiService.generateFinalAnswer(\"delivery_issue\", parameters, null, message, context, language);\n}\nasync function handleChangeDelivery(parameters, message, context, language) {\n    const { order_number, email, new_delivery_info, delivery_address_confirmed } = parameters;\n    if (!order_number || !email) {\n        const prompt = language === \"Spanish\" ? \"\\xa1Ey! Necesito el n\\xfamero de pedido (tipo #12345) y tu email para poder ayudarte con el cambio de direcci\\xf3n \\uD83D\\uDCE6\" : \"Hey! I need your order number (like #12345) and email to help you with the address change \\uD83D\\uDCE6\";\n        return await aiService.generateFinalAnswer(\"change_delivery\", parameters, null, prompt, context, language);\n    }\n    const shopifyData = await (0,_queries_order__WEBPACK_IMPORTED_MODULE_1__.extractCompleteOrder)(order_number, email);\n    if (!shopifyData?.success || !shopifyData?.order) {\n        return await aiService.generateFinalAnswer(\"change_delivery\", parameters, shopifyData, message, context, language);\n    }\n    if (!shopifyData.order.fulfillments?.length) {\n        if (!new_delivery_info) {\n            return await aiService.confirmDeliveryAddress(parameters, message, context, language);\n        }\n        const addressValidation = await aiService.validateAddress(new_delivery_info);\n        if (!addressValidation.formattedAddress) {\n            return await aiService.confirmDeliveryAddress(parameters, message, context, language);\n        }\n        if (delivery_address_confirmed) {\n            await (0,_queries_order__WEBPACK_IMPORTED_MODULE_1__.updateShippingAddress)(shopifyData.order.admin_graphql_api_id, addressValidation.formattedAddress, shopifyData.order.shipping_address);\n            const confirmationMessage = language === \"Spanish\" ? `¡Perfecto! He actualizado la dirección de envío a:\\n\\n${addressValidation.formattedAddress}\\n\\n¡Tu pedido se enviará a esta nueva dirección! 📦✨` : `Perfect! I've updated the shipping address to:\\n\\n${addressValidation.formattedAddress}\\n\\nYour order will be shipped to this new address! 📦✨`;\n            return confirmationMessage;\n        }\n        return await aiService.confirmDeliveryAddress(parameters, message, context, language);\n    }\n    return await aiService.generateFinalAnswer(\"change_delivery\", parameters, shopifyData, message, context, language);\n}\nasync function handleProductInquiry(parameters, message, context, language) {\n    const { product_name } = parameters;\n    const shopifyData = await (0,_queries_order__WEBPACK_IMPORTED_MODULE_1__.extractProduct)(product_name);\n    if (!shopifyData?.success || !shopifyData?.product) {\n        return await aiService.generateFinalAnswer(\"product_inquiry\", parameters, null, message, context, language);\n    }\n    return await aiService.generateFinalAnswer(\"change_delivery\", parameters, shopifyData, message, context, language);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/queries/index.ts":
/*!******************************!*\
  !*** ./app/queries/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSession: () => (/* binding */ createSession)\n/* harmony export */ });\nconst createSession = ()=>{\n    if (!process.env.SHOPIFY_ACCESS_TOKEN || !process.env.SHOP_URL) {\n        throw new Error(\"Missing Shopify access token or shop URL\");\n    }\n    return {\n        headers: {\n            \"X-Shopify-Access-Token\": process.env.SHOPIFY_ACCESS_TOKEN,\n            \"Content-Type\": \"application/json\"\n        }\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvcXVlcmllcy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsZ0JBQWdCO0lBQzNCLElBQUksQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDQyxvQkFBb0IsSUFBSSxDQUFDRixRQUFRQyxHQUFHLENBQUNFLFFBQVEsRUFBRTtRQUM5RCxNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxPQUFPO1FBQ0xDLFNBQVM7WUFDUCwwQkFBMEJMLFFBQVFDLEdBQUcsQ0FBQ0Msb0JBQW9CO1lBQzFELGdCQUFnQjtRQUNsQjtJQUNGO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL215LXNob3BpZnktY2hhdGJvdC8uL2FwcC9xdWVyaWVzL2luZGV4LnRzPzk5NDYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNyZWF0ZVNlc3Npb24gPSAoKTogUmVxdWVzdEluaXQgPT4ge1xuICBpZiAoIXByb2Nlc3MuZW52LlNIT1BJRllfQUNDRVNTX1RPS0VOIHx8ICFwcm9jZXNzLmVudi5TSE9QX1VSTCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgU2hvcGlmeSBhY2Nlc3MgdG9rZW4gb3Igc2hvcCBVUkxcIik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiWC1TaG9waWZ5LUFjY2Vzcy1Ub2tlblwiOiBwcm9jZXNzLmVudi5TSE9QSUZZX0FDQ0VTU19UT0tFTixcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgIH0sXG4gIH07XG59O1xuIl0sIm5hbWVzIjpbImNyZWF0ZVNlc3Npb24iLCJwcm9jZXNzIiwiZW52IiwiU0hPUElGWV9BQ0NFU1NfVE9LRU4iLCJTSE9QX1VSTCIsIkVycm9yIiwiaGVhZGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/queries/index.ts\n");

/***/ }),

/***/ "(rsc)/./app/queries/order/index.ts":
/*!************************************!*\
  !*** ./app/queries/order/index.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractCompleteOrder: () => (/* binding */ extractCompleteOrder),\n/* harmony export */   extractProduct: () => (/* binding */ extractProduct),\n/* harmony export */   getOrderQuery: () => (/* binding */ getOrderQuery),\n/* harmony export */   getProductQuery: () => (/* binding */ getProductQuery),\n/* harmony export */   trackOrder: () => (/* binding */ trackOrder),\n/* harmony export */   updateShippingAddress: () => (/* binding */ updateShippingAddress)\n/* harmony export */ });\n/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! .. */ \"(rsc)/./app/queries/index.ts\");\n\n/// EXTRACT FUNCTION\nasync function getOrderQuery(orderNumber) {\n    const session = (0,___WEBPACK_IMPORTED_MODULE_0__.createSession)();\n    // El %23 es lo mismo que poner #\n    const url = `${process.env.SHOP_URL}/admin/api/${process.env.API_VERSION}/orders.json?query=name:%23${orderNumber}`;\n    try {\n        const response = await fetch(url, session);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.orders[0];\n    } catch (error) {\n        console.error(\"The order number is not correct:\", error);\n        return null;\n    }\n}\nasync function getProductQuery(productName) {\n    const session = (0,___WEBPACK_IMPORTED_MODULE_0__.createSession)();\n    const url = `${process.env.SHOP_URL}/admin/api/${process.env.API_VERSION}/products.json?title=${encodeURIComponent(productName)}`;\n    try {\n        const response = await fetch(url, session);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        return data.products[0];\n    } catch (error) {\n        console.error(\"Error fetching product:\", error);\n        return null;\n    }\n}\n/// TRACK FUNCTION\nasync function trackOrder(orderNumber, email) {\n    const cleanOrderNumber = orderNumber.replace(/#/g, \"\");\n    const order = await getOrderQuery(cleanOrderNumber);\n    // Order number is invalid if no order is found\n    if (!order) {\n        return {\n            success: false,\n            error: \"InvalidOrderNumber\"\n        };\n    }\n    // Order exists but email does not match\n    if (!order.contact_email || order.contact_email.toLowerCase() !== email.toLowerCase()) {\n        return {\n            success: false,\n            error: \"EmailMismatch\"\n        };\n    }\n    return {\n        success: true,\n        order\n    };\n}\n// Change delivery 1\nasync function extractCompleteOrder(orderNumber, email) {\n    const cleanOrderNumber = orderNumber.replace(/#/g, \"\");\n    const order = await getOrderQuery(cleanOrderNumber);\n    // Order number is invalid if no order is found\n    if (!order) {\n        return {\n            success: false,\n            error: \"InvalidOrderNumber\"\n        };\n    }\n    // Order exists but email does not match\n    if (!order.contact_email || order.contact_email.toLowerCase() !== email.toLowerCase()) {\n        return {\n            success: false,\n            error: \"EmailMismatch\"\n        };\n    }\n    // Both order number and email match\n    return {\n        success: true,\n        order: order\n    };\n}\n// Update shipping address\nasync function updateShippingAddress(orderId, new_delivery_info, addressData) {\n    console.log(\"Updating shipping address\");\n    // Extract address components from Google Places API\n    const addressComponents = {\n        address1: \"\",\n        address2: \"\",\n        city: \"\",\n        zip: \"\",\n        provinceCode: \"\"\n    };\n    try {\n        // Use GPT-4 to parse the address components\n        const gptResponse = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${process.env.OPENAI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-4o-mini\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: `Extract address components from addresses into JSON format with these keys: address1, address2, city, zip, province\n\n                  Example input: \"Calle Gran Via 32, 4B, Madrid, Spain 28013\"\n                  Example output: {\n                    \"address1\": \"Calle Gran Via 32\",\n                    \"address2\": \"4B\", \n                    \"city\": \"Madrid\",\n                    \"zip\": \"28013\",\n                    \"province\": \"Madrid\"\n                  }`\n                    },\n                    {\n                        role: \"user\",\n                        content: new_delivery_info\n                    }\n                ]\n            })\n        });\n        if (!gptResponse.ok) {\n            throw new Error(\"Failed to parse address with GPT\");\n        }\n        const gptData = await gptResponse.json();\n        const parsedAddress = JSON.parse(gptData.choices[0].message.content);\n        console.log(parsedAddress);\n        // Map province names to autonomous community codes\n        const provinceCodeMap = {\n            \"A Coru\\xf1a\": \"C\",\n            \"La Coru\\xf1a\": \"C\",\n            Álava: \"VI\",\n            Araba: \"VI\",\n            Albacete: \"AB\",\n            Alicante: \"A\",\n            Alacant: \"A\",\n            Almería: \"AL\",\n            Asturias: \"O\",\n            Ávila: \"AV\",\n            Badajoz: \"BA\",\n            \"Illes Balears\": \"PM\",\n            \"Islas Baleares\": \"PM\",\n            Balears: \"PM\",\n            Barcelona: \"B\",\n            Burgos: \"BU\",\n            Cáceres: \"CC\",\n            Cádiz: \"CA\",\n            Cantabria: \"S\",\n            Castellón: \"CS\",\n            Castelló: \"CS\",\n            Ceuta: \"CE\",\n            \"Ciudad Real\": \"CR\",\n            Córdoba: \"CO\",\n            Cuenca: \"CU\",\n            Gipuzkoa: \"SS\",\n            Guipúzcoa: \"SS\",\n            Girona: \"GI\",\n            Gerona: \"GI\",\n            Granada: \"GR\",\n            Guadalajara: \"GU\",\n            Huelva: \"H\",\n            Huesca: \"HU\",\n            Jaén: \"J\",\n            \"La Rioja\": \"LO\",\n            \"Las Palmas\": \"GC\",\n            León: \"LE\",\n            Lleida: \"L\",\n            Lérida: \"L\",\n            Lugo: \"LU\",\n            Madrid: \"M\",\n            Málaga: \"MA\",\n            Melilla: \"ML\",\n            Murcia: \"MU\",\n            Navarra: \"NA\",\n            Nafarroa: \"NA\",\n            Ourense: \"OR\",\n            Orense: \"OR\",\n            Palencia: \"P\",\n            Pontevedra: \"PO\",\n            Salamanca: \"SA\",\n            \"Santa Cruz de Tenerife\": \"TF\",\n            Segovia: \"SG\",\n            Sevilla: \"SE\",\n            Soria: \"SO\",\n            Tarragona: \"T\",\n            Teruel: \"TE\",\n            Toledo: \"TO\",\n            Valencia: \"V\",\n            València: \"V\",\n            Valladolid: \"VA\",\n            Bizkaia: \"BI\",\n            Vizcaya: \"BI\",\n            Zamora: \"ZA\",\n            Zaragoza: \"Z\"\n        };\n        // Update address components with GPT parsed values\n        addressComponents.address1 = parsedAddress.address1 || \"\";\n        addressComponents.address2 = parsedAddress.address2 || \"\";\n        addressComponents.city = parsedAddress.city || \"\";\n        addressComponents.zip = parsedAddress.zip || \"\";\n        addressComponents.provinceCode = provinceCodeMap[parsedAddress.province] || \"\";\n    } catch (error) {\n        console.error(\"Error validating address:\", error);\n        return {\n            success: false,\n            error: \"Failed to validate address\"\n        };\n    }\n    console.log(addressComponents);\n    try {\n        const query = `mutation updateOrderMetafields($input: OrderInput!) {\n      orderUpdate(input: $input) {\n        order {\n          id\n          shippingAddress {\n            address1\n            address2\n            city\n            countryCode\n            firstName\n            lastName\n            phone\n            zip\n            provinceCode\n          }\n        }\n        userErrors {\n          message\n          field\n        }\n      }\n    }`;\n        const response = await fetch(`${process.env.SHOP_URL}/admin/api/${process.env.API_VERSION}/graphql.json`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Shopify-Access-Token\": process.env.SHOPIFY_ACCESS_TOKEN\n            },\n            body: JSON.stringify({\n                query,\n                variables: {\n                    input: {\n                        id: orderId,\n                        shippingAddress: {\n                            ...addressComponents,\n                            countryCode: \"ES\",\n                            firstName: addressData.first_name,\n                            lastName: addressData.last_name,\n                            phone: addressData.phone\n                        }\n                    }\n                }\n            })\n        });\n        const data = await response.json();\n        console.log(\"Data\");\n        console.log(data);\n        if (!data.data?.orderUpdate) {\n            return {\n                success: false,\n                error: data.errors?.[0]?.message || \"Failed to update order\"\n            };\n        }\n        if (data.data.orderUpdate.userErrors.length > 0) {\n            return {\n                success: false,\n                error: data.data.orderUpdate.userErrors[0].message\n            };\n        }\n        return {\n            success: true,\n            orderId: data.data.orderUpdate.order.id\n        };\n    } catch (error) {\n        console.error(\"Error updating order:\", error);\n        return {\n            success: false,\n            error: \"Failed to update order\"\n        };\n    }\n}\nasync function extractProduct(productName) {\n    const productShopify = await getProductQuery(productName);\n    console.log(\"Product Shopify\");\n    console.log(productShopify);\n    if (!productShopify) {\n        return {\n            success: false,\n            product: null\n        };\n    }\n    // Both order number and email match\n    return {\n        success: true,\n        product: productShopify\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/queries/order/index.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/axios","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Froute&page=%2Fapi%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Froute.ts&appDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsantiagogerickeparga%2FDesktop%2FAI%2Fmy-shopify-chatbot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();